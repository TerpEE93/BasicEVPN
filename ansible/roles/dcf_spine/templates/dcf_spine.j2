/* Configuration automatically generated by Ansible from template dcf_spine.j2 */
system {
    host-name {{ hostname }};
    root-authentication {
        encrypted-password {{ root_pw_encrypted }}; ## SECRET-DATA
    }
    login {
        user {{ admin_user.name }} {
            uid 2001;
            class super-user;
            authentication {
                encrypted-password {{ admin_user.pw_encrypted }}; ## SECRET-DATA
            }
        }
    }
    services {
        ssh {
            root-login allow;
        }
        netconf {
            ssh;
        }
        rest {
            http {
                port 8080;
            }
            enable-explorer;
        }
    }
    syslog {
        user * {
            any emergency;
        }
        file messages {
            any notice;
            authorization info;
        }
        file interactive-commands {
            interactive-commands any;
        }
    }
    extensions {
        providers {
            juniper {
                license-type juniper deployment-scope commercial;
            }
        }
    }
}
interfaces {
{% for interface in leaf_interfaces %}
    {{ interface.name }} {
        description "{{ interface.name }}: Link to Leaf {{ interface.peer_node_id }}";
        unit 0 {
            family inet {
                address 10.{{ node_id }}.{{ interface.peer_node_id }}.1/30;
            }
        }
    }
{% endfor %}
{% for interface in edge_interfaces %}
    {{ interface.name }} {
        description "{{ interface.name }}: Link to Edge {{ interface.peer_node_id }}";
        unit 0 {
            family inet {
                address 10.{{ interface.peer_node_id }}.{{ node_id }}.2/30;
            }
            family mpls;
        }
    }
{% endfor %}
    em0 {
        unit 0 {
            family inet {
                address {{ mgt.prefix }}.{{ node_id }}/24;
            }
        }
    }
{% if platform == "vQFX" %}
    em1 {
        unit 0 {
            family inet {
                address 169.254.0.2/24;
            }
        }
    }
{% endif %}
    irb {
{% for vlan in vlans %}
        unit {{ vlan.vid }} {
            description "irb.{{ vlan.vid }}: Default GW in {{ vlan.name }}";
            family inet {
                address {{ vlan.prefix }}.{{ node_id }}/{{ vlan.mask }} {
                    virtual-gateway-address {{ vlan.prefix }}.1;
                }
            }
        }
{% endfor %}
    }
    lo0 {
        unit 0 {
            family inet {
                address {{ spine_lo_prefix }}.{{ node_id }}/32;
            }
        }
{% for tenant in tenants %}
        unit {{ tenant.vrf_id }} {
            description "lo0.{{ tenant.vrf_id }}: Loopback in {{ tenant.name }} VRF -- Needed for control plane";
            family inet {
                address {{ spine_lo_prefix }}.{{ node_id }}/32;
            }
        }
{% endfor %}
    }
}
forwarding-options {
    storm-control-profiles default {
        all;
    }
}
routing-options {
    static {
        route {{ mgt.default_route }} next-hop {{ mgt.default_nh }};
    }
    router-id {{ spine_lo_prefix }}.{{ node_id }};
    autonomous-system {{ site_asn }};
    forwarding-table {
        export PFE-LB;
    }
}
protocols {
    mpls {
{% for interface in edge_interfaces %}
        interface {{ interface.name }}.0;
{% endfor %}
    }
    bgp {
        group UNDERLAY {
            type external;
            mtu-discovery
            import UNDERLAY-IMPORT-SPINE;
            family inet {
                unicast;
            }
            export UNDERLAY-EXPORT-SPINE;
            local-as 650{{ node_id }};
            bfd-liveness-detection {
                minimum-interval 1000;
                multiplier 3;
                session-mode single-hop;
            }
            multipath multiple-as;
{% for interface in leaf_interfaces %}
            neighbor 10.{{ node_id }}.{{ interface.peer_node_id }}.2 {
                peer-as 65{{ interface.peer_node_id }};
            }
{% endfor %}
        }
        group OVERLAY {
            type internal;
            local-address {{ spine_lo_prefix }}.{{ node_id }};
            family evpn {
                signaling;
            }
            export OVERLAY-SPINE-EXPORT;
            vpn-apply-export;
            cluster 0.0.0.1;
            bfd-liveness-detection {
                minimum-interval 1000;
                multiplier 3;
                session-mode single-hop;
            }
            multipath;
            allow {{ leaf_lo_prefix }}.0/24;
        }
        group OVERLAY-RR {
            type internal;
            local-address {{ spine_lo_prefix }}.{{ node_id }};
            family inet-vpn {
                unicast;
            }
            family evpn {
                signaling;
            }
            export OVERLAY-SPINE-EXPORT;
            vpn-apply-export;
            bfd-liveness-detection {
                minimum-interval 1000;
                multiplier 3;
                session-mode single-hop;
            }
            multipath;
{% for spine in spines %}
{% if spine.node_id|string() != node_id|string() %}
            neighbor {{ spine_lo_prefix }}.{{ spine.node_id }};
{% endif %}
{% endfor %}
        }
        group DC-EDGE {
            type external;
            family inet {
                labeled-unicast;
            }
            family inet-vpn {
                unicast;
            }
            export EXPORT-TO-EDGE;
            bfd-liveness-detection {
                minimum-interval 1000;
                multiplier 3;
                session-mode single-hop;
            }
            peer-as {{ enterprise_asn }};
{% for edge in edge_rtrs %}
            neighbor 10.{{ edge.node_id }}.{{ node_id }}.1;
{% endfor %}
        }
    }
    evpn {
        encapsulation vxlan;
        extended-vni-list [ {% for vlan in vlans %}{{ vlan.vni }} {% endfor %} ];
        multicast-mode ingress-replication;
        vni-options {
{% for vlan in vlans %}
            vni {{ vlan.vni }} {
                vrf-target export target:{{ site_asn }}:{{ vlan.vni }};
            }
{% endfor %}
        }
    }
    igmp-snooping {
        vlan default;
    }
}
policy-options {
    policy-statement EVPN-VNI-IMPORT {
        term IMPORT-EVPN-ESI {
            from community EVPN-ESI;
            then accept;
        }
{% for vlan in vlans %}
        term IMPORT-VNI{{ vlan.vni }} {
            from community VNI{{ vlan.vni }};
            then accept;
        }
{% endfor %}
        term DEFAULT {
            then reject;
        }
    }
    policy-statement EXPORT-TO-EDGE {
        term INFRA-LINKS {
            from {
                protocol direct;
{% for edge in edge_rtrs %}
                route-filter 10.{{ edge.node_id }}.{{ node_id }}.2/30 orlonger;
{% endfor %}
            }
            then accept;
        }
        term OVERLAY-ROUTES {
            from {
                protocol bgp;
                community OVERLAY;
            }
            then {
                community delete OVERLAY;
                accept;
            }
        }
        term DEFAULT {
            then reject;
        }
    }
    policy-statement OVERLAY-SPINE-EXPORT {
        term NO-EVPN-TYPE-5 {
            from {
                family evpn;
                nlri-route-type 5;
            }
            then reject;
        }
        term NO-UNDERLAY {
            from {
                protocol bgp;
                community UNDERLAY;
            }
            then reject;
        }
        term DEFAULT {
            then {
                community add OVERLAY;
                accept;
            }
        }
    }
    policy-statement PFE-LB {
        term DEFAULT {
            then {
                load-balance per-packet;
            }
        }
    }
    policy-statement UNDERLAY-EXPORT-SPINE {
        term INFRA-LINKS {
            from {
                protocol direct;
                route-filter {{ spine_lo_prefix }}.0/24 orlonger;
                route-filter 10.0.0.0/8 orlonger;
            }
            then {
                community add UNDERLAY;
                accept;
            }
        }
        term BGP {
            from {
                protocol bgp;
                community UNDERLAY;
            }
            then accept;
        }
        term DEFAULT {
            then reject;
        }
    }
    policy-statement UNDERLAY-IMPORT-SPINE {
        term REJECT-GT-3-AS {
            from {
                protocol bgp;
                as-path LIMIT-3-AS;
            }
            then reject;
        }
        term ACCEPT-UNDERLAY {
            from community UNDERLAY;
            then accept;
        }
        term DEFAULT {
            then reject;
        }
    }
    community EVPN-ESI members target:{{ site_asn }}:9999;
    community OVERLAY members {{ site_asn }}:7986;
    community UNDERLAY members {{ site_asn }}:8578;
{% for vlan in vlans %}
    community VNI{{ vlan.vni }} members target:{{ site_asn }}:{{ vlan.vni }};
{% endfor %}
    as-path LIMIT-3-AS ".{3,}";
}
routing-instances {
{% for tenant in tenants %}
    {{ tenant.name }} {
        instance-type vrf;
{% for vid in tenant.vid_list %}
        interface irb.{{ vid }};
{% endfor %}
        interface lo0.{{ tenant.vrf_id }};
        route-distinguisher {{ spine_lo_prefix}}.{{ node_id }}:{{ tenant.vrf_id }};
        vrf-target target:{{ site_asn }}:{{ tenant.vrf_id }};
        vrf-table-label;
    }
{% endfor %}
}
switch-options {
    vtep-source-interface lo0.0;
    route-distinguisher {{ spine_lo_prefix }}.{{ node_id }}:9999;
    vrf-import EVPN-VNI-IMPORT;
    vrf-target target:{{ site_asn }}:9999;
}
vlans {
    default {
        vlan-id 1;
    }
{% for vlan in vlans %}
    {{ vlan.name }} {
        vlan-id {{ vlan.vid }};
        l3-interface irb.{{ vlan.vid }};
        vxlan {
            vni {{ vlan.vni }};
            ingress-node-replication;
        }
    }
{% endfor %}
}
